% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tools.R
\name{ensurePythonEnv}
\alias{ensurePythonEnv}
\title{Ensure availability of a dedicated Python environment with SymPy}
\usage{
ensurePythonEnv(envname = "CppODE")
}
\arguments{
\item{envname}{Character scalar. Name of the Python virtual environment
to check or create. Default is \code{"CppODE"}.}
}
\value{
Invisibly returns the name of the environment that was ensured
and activated.
}
\description{
This helper function checks whether a Python virtual environment with a
given name (default: \code{"CppODE"}) exists and contains the package
\strong{SymPy}. If not, it will automatically create the virtual environment
using \code{reticulate::virtualenv_create()} and install SymPy into it.
}
\details{
After ensuring availability, the environment is activated via
\code{reticulate::use_virtualenv()}, so that subsequent calls to
\code{reticulate::import("sympy")} work reliably, independent of the user's
global Python installation.
\subsection{Typical usage}{

Call this function at the beginning of any code that requires SymPy,
e.g. inside your solver generator:
\preformatted{
ensurePythonEnv("CppODE")
sympy  <- reticulate::import("sympy")
parser <- reticulate::import("sympy.parsing.sympy_parser")
}
}

\subsection{Notes}{
\itemize{
\item Requires the R package \strong{reticulate}.
\item Uses Python 3 if available on the system.
\item If you prefer Conda environments instead of virtualenvs, you can
adapt this function to use \code{reticulate::conda_create()} and
\code{reticulate::use_condaenv()}.
}
}
}
\keyword{internal}

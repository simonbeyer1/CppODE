% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CppODE.R
\name{CppFun}
\alias{CppFun}
\title{Generate C++ code for ODE models with sensitivities and events}
\usage{
CppFun(
  odes,
  events = NULL,
  fixed = NULL,
  includeTimeZero = TRUE,
  compile = TRUE,
  modelname = NULL,
  deriv = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{odes}{Named character vector of ODE right-hand sides.
Names correspond to state variables.}

\item{events}{Data frame describing events (see Details).
Default: \code{NULL} (no events).}

\item{fixed}{Character vector of fixed states or parameters.
Only used if \code{deriv = TRUE}.}

\item{includeTimeZero}{Logical. If \code{TRUE}, ensure that \code{0} is
included in the integration times even if not supplied by the user.
Default: \code{TRUE}.}

\item{compile}{Logical. If \code{TRUE}, compiles and loads the generated C++ code.}

\item{modelname}{Optional character string for the output filename base.
If \code{NULL}, a random identifier is generated.}

\item{deriv}{Logical. If \code{TRUE}, compute sensitivities using AD in forward mode.
If \code{FALSE}, use plain doubles (faster, but no sensitivities).}

\item{verbose}{Logical. If \code{TRUE}, print progress messages.}
}
\value{
A string with the model name (same as \code{modelname}).
Attributes:
\itemize{
\item \code{equations}: ODE definitions
\item \code{variables}: State variable names
\item \code{parameters}: Parameter names
\item \code{events}: Events data.frame
\item \code{solver}: Solver description
\item \code{fixed}: Fixed states/parameters
\item \code{jacobian}: Symbolic Jacobian expressions
\item \code{sensvariables}: Names of sensitivity variables (if any)
}
}
\description{
This function generates a C++ ODE solver using Boost.Odeintâ€™s stiff
Rosenbrock 4 method with embedded 3(4) error control and dense output.
The generated C++ code supports:
\itemize{
\item Fixed-time and root-triggered events
\item Optional sensitivity analysis via automatic differentiation (AD) in forward mode
}
}
\details{
\subsection{Events}{

Events can be specified in a data.frame with columns:
\describe{
\item{var}{Name of the affected state variable}
\item{value}{Numeric value to apply at the event}
\item{method}{"replace", "add", or "multiply"}
\item{time}{(optional) numeric time point of the event}
\item{root}{(optional) root expression in terms of \code{x} and \code{time}}
}
Each event must specify either a \code{time} or a \code{root}.
}

\subsection{Sensitivities}{

If \code{deriv = TRUE}, the system is augmented with automatic differentiation
using FADBAD++. State and parameter sensitivities are computed and returned.
If \code{deriv = FALSE}, the solver runs with plain doubles and no sensitivities.
}
}
\examples{
\dontrun{
eqns <- c(
A = "-k1*A^2 * time",
B = "k1*A^2 * time - k2*B"
)

events <- data.frame(
  var   = "A",
  time  = "t_e",
  value = 1,
  method= "add",
  root = NA
)

f <- CppODE::CppFun(eqns, events = events, modelname = "Amodel_s")

solve <- function(times, params, abstol = 1e-8, reltol = 1e-6, maxattemps = 5000, maxsteps = 1e6) {
  paramnames <- c(attr(f,"variables"), attr(f,"parameters"))
  # check for missing parameters
  missing <- setdiff(paramnames, names(params))
  if (length(missing) > 0) stop(sprintf("Missing parameters: \%s", paste(missing, collapse = ", ")))
  params <- params[paramnames]
  .Call(paste0("solve_",as.character(f)),
        as.numeric(times),
        as.numeric(params),
        as.numeric(abstol),
        as.numeric(reltol),
        as.integer(maxattemps),
        as.integer(maxsteps))
}

params <- c(A = 1, B=0, k1 = 0.1, k2= 0.2, t_e = 3)
times  <- seq(0, 10, length.out = 300)

res <- solve(times, params, abstol = 1e-6, reltol = 1e-6)
head(res)
}
}
\author{
Simon Beyer, \email{simon.beyer@fdm.uni-freiburg.de}
}

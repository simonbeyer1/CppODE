% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CppODE.R
\name{CppFun}
\alias{CppFun}
\title{Generate C++ code for ODE models with sensitivities and events}
\usage{
CppFun(
  odes,
  events = NULL,
  fixed = NULL,
  compile = TRUE,
  modelname = NULL,
  deriv = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{odes}{Named character vector of ODE right-hand sides.
Names correspond to state variables.}

\item{events}{Data frame describing events (see Details).
Default: \code{NULL} (no events).}

\item{fixed}{Character vector of fixed states or parameters.
Only used if \code{deriv = TRUE}.}

\item{compile}{Logical. If \code{TRUE}, compiles and loads the generated C++ code.}

\item{modelname}{Optional character string for the output filename base.
If \code{NULL}, a random identifier is generated.}

\item{deriv}{Logical. If \code{TRUE}, compute sensitivities using AD.
If \code{FALSE}, use plain doubles (faster, but no sensitivities).}

\item{verbose}{Logical. If \code{TRUE}, print progress messages.}
}
\value{
A string with the model name (same as \code{modelname}).
Attributes:
\itemize{
\item \code{equations}: ODE definitions
\item \code{variables}: State variable names
\item \code{parameters}: Parameter names
\item \code{events}: Events data.frame
\item \code{solver}: Solver description
}
}
\description{
This function automatically builds a C++ implementation of an ODE system
suitable for Boost.Odeint stiff solvers (Rosenbrock4 with dense output).
The generated C++ code supports:
\itemize{
\item Numerical integration of user-defined ODEs
\item Fixed-time and root-triggered events
\item Optional sensitivity analysis via automatic differentiation
}
}
\details{
\subsection{Events}{

Events can be specified in a data.frame with columns:
\describe{
\item{var}{Name of the affected state variable}
\item{value}{Numeric value to apply at the event}
\item{method}{"replace", "add", or "multiply"}
\item{time}{(optional) numeric time point of the event}
\item{root}{(optional) root expression in terms of \code{x} and \code{time}}
}
Each event must specify either a \code{time} or a \code{root}.
}

\subsection{Sensitivities}{

If \code{deriv = TRUE}, the system is augmented with automatic differentiation
using FADBAD++. State and parameter sensitivities are computed and returned.
If \code{deriv = FALSE}, the solver runs with plain doubles and no sensitivities.
}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/symbolics.R
\name{Sympy2CppCode}
\alias{Sympy2CppCode}
\title{Convert a SymPy expression to C++ code}
\usage{
Sympy2CppCode(expr, states, params, n, expr_name = NULL, AD = TRUE)
}
\arguments{
\item{expr}{SymPy expression (reticulate/sympy object).}

\item{states}{Character vector of state variable names.}

\item{params}{Character vector of parameter names.}

\item{n}{Number of states.}

\item{expr_name}{Optional: name of the ODE (used only in error messages).}

\item{AD}{Logical. If \code{TRUE}, the numeric type is \code{AD}, otherwise \code{double}.}
}
\value{
A character string with valid C++ code.
}
\description{
This helper converts a SymPy expression into valid C++ code.
Symbol names are systematically replaced:
\itemize{
\item State variables \code{x1,...,xn} → \code{x[0],...,x[n-1]}.
\item Initial values \code{x1_0,...,xn_0} → \code{params[0],...,params[n-1]}.
\item Parameters \code{p1,...,pm} → \code{params[n],...,params[n+m-1]}.
\item Time variable \code{time} → \code{t}.
}
}
\details{
No additional rewrites (e.g. for non-smooth functions or ternary operators)
are performed – the SymPy C++ output is used directly.
}
\author{
Simon Beyer, \email{simon.beyer@fdm.uni-freiburg.de}
}
\keyword{internal}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CppODE.R
\name{GetBoostObserver}
\alias{GetBoostObserver}
\title{Generate a generic Boost.Odeint observer (C++ code)}
\usage{
GetBoostObserver(states, events, time_tol = NULL)
}
\arguments{
\item{states}{Character vector of state names (order defines x indices).}

\item{events}{Data frame of events with columns:
\describe{
\item{var}{State name the event targets (one of \code{states}).}
\item{time}{Numeric time for fixed-time event (use \code{NA} for root events).}
\item{value}{Numeric value (used with method).}
\item{method}{Character: "replace" or "add". \code{NA} is treated as "replace".}
\item{root}{Optional character expression for root event (ignored here).}
}
Only rows with non-\code{NA} \code{time} are embedded in the observer. Root events
are intentionally skipped (they require a custom integration loop).}

\item{time_tol}{Numeric tolerance for matching fixed event times. If \code{NULL},
exact comparison (\code{==}) is used. Recommended: a small value like \code{1e-10}.}
}
\value{
A single character string with the full C++ code for:
\itemize{
\item an \code{apply_event} helper,
\item an \code{observer} struct that records outputs and applies fixed-time events.
The code uses \verb{CppAD::AD<double>} as \code{AD} and \verb{boost::numeric::ublas::vector<AD>} as state.
}
}
\description{
This function generates a C++ \code{observer} struct for Boost.Odeint that
(1) records states at each observer callback and
(2) applies \strong{fixed-time events} with a configurable time tolerance.
}
\details{
Notes:
\itemize{
\item Root (zero-crossing) events are \strong{not} handled here, because an observer
only sees the current (x, t). Robust root handling requires bracketing and
refinement in the integration loop (sign change between successive states),
which should be emitted separately.
\item Event methods supported: "replace", "add".
\item The observer is generic in the number of states; it pushes back all \code{x[i]}
to a flat output vector \code{y} at each callback.
}
}
\examples{
ev <- data.frame(
  var    = c("A","B","A"),
  time   = c(1, 2, 5),
  value  = c(0.5, 1.0, 2.0),
  method = c("replace", "add", NA),
  root   = c(NA, NA, NA),
  stringsAsFactors = FALSE
)
code <- GetBoostObserver(states = c("A","B"), events = ev, time_tol = 1e-10)
cat(code)
}

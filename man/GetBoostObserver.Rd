% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CppODE.R
\name{GetBoostObserver}
\alias{GetBoostObserver}
\title{Generate Boost.Odeint observer (fixed-time events with params)}
\usage{
GetBoostObserver(states, params, events = NULL)
}
\arguments{
\item{states}{Character vector of state names (order defines \code{x[i]} indices).}

\item{params}{Character vector of parameter names (order defines \code{p[j]} indices,
shifted by \code{length(states)} in generated code).}

\item{events}{Optional data frame with columns:
\itemize{
\item \code{var}: state name the event targets
\item \code{time}: numeric constant, state name, or parameter name
\item \code{value}: numeric constant, state name, or parameter name
\item \code{method}: integer (1,2,3) or string ("replace","add","multiply")
}}
}
\value{
A single character string containing the C++ observer code.
}
\description{
This function generates C++ code for a \code{Boost.Odeint} observer struct
that records states at each callback and applies \strong{fixed-time events}
exactly when \code{curr_t == time}.
}
\details{
Features:
\itemize{
\item Events are applied at exact times (no tolerance).
\item Each event appears at most once (no counters needed).
\item Allowed methods:
\itemize{
\item \code{1} or \code{"replace"} → overwrite the state with value
\item \code{2} or \code{"add"}     → add value to the state
\item \code{3} or \code{"multiply"}→ multiply the state with value
}
\item Event \code{time} and \code{value} can be:
\itemize{
\item numeric constants
\item state names (replaced with \code{x[index]})
\item parameter names (replaced with \code{p[index]}, where indices follow after the states)
}
}
}
\examples{
states <- c("A","B")
params <- c("p1","p2")

ev <- data.frame(
  var    = c("A","B","A"),
  time   = c("p1", "2.0", "5.0"),
  value  = c("A", "p2", "3.0"),
  method = c("replace", "add", "multiply"),
  stringsAsFactors = FALSE
)

code1 <- GetBoostObserver(states, params, ev)
code2 <- GetBoostObserver(states, params)  # no events
cat(code1)
cat(code2)

}

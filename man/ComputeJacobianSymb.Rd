% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/symbolics.R
\name{ComputeJacobianSymb}
\alias{ComputeJacobianSymb}
\title{Compute the Jacobian of a system of ODEs and generate C++ code}
\usage{
ComputeJacobianSymb(odes, time_var = "time")
}
\arguments{
\item{odes}{Named character vector of ODEs. Names correspond to state variables.}

\item{time_var}{Character. The name of the time variable in the ODEs (default: "time").}
}
\value{
A list with:
\describe{
\item{f.x}{Jacobian matrix entries as strings (R representation).}
\item{f.t}{Explicit derivatives with respect to time as strings (R representation).}
}
The returned list has an attribute \code{CppCode} containing the full C++ struct code.
}
\description{
This function takes a system of ordinary differential equations (ODEs) defined as character strings and:
\enumerate{
\item Computes the Jacobian matrix with respect to state variables.
\item Computes the explicit time derivatives of each ODE.
\item Generates a C++ struct suitable for use in stiff solvers with automatic differentiation (AD).
}
}
\details{
The C++ code replaces:
\itemize{
\item state variables with \verb{x[0..n-1]},
\item initial values with \verb{params[0..n-1]},
\item parameters with \code{params[n..]},
\item time variable with \code{t}.
}
}
\examples{
odes <- c(x = "v", v = "mu*(1 - x^2)*v - x")
res <- ComputeJacobianSymb(odes)
cat(attr(res, "CppCode"))
}
\author{
Simon Beyer, \email{simon.beyer@fdm.uni-freiburg.de}
}
